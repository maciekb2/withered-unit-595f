---
import { getCollection } from 'astro:content';
import FormattedDate from './FormattedDate.astro';

const posts = await getCollection('blog');

const mostViewed = [...posts]
  .sort((a, b) => (b.data.views ?? 0) - (a.data.views ?? 0))
  .slice(0, 5);
const mostLiked = [...posts]
  .sort((a, b) => (b.data.likes ?? 0) - (a.data.likes ?? 0))
  .slice(0, 3);
const newest = [...posts]
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 3);
---

<aside class="sidebar">
  <section>
    <h3>Top 5 wyświetleń</h3>
    <ul id="most-viewed-list">
      {mostViewed.map((post) => (
        <li data-slug={post.id} data-views={post.data.views}>
          <a href={`/blog/${post.id}/`}>{post.data.title}</a>
          <span class="count">{post.data.views}</span>
        </li>
      ))}
    </ul>
  </section>
  <section>
    <h3>Najwięcej polubień</h3>
    <ul id="most-liked-list">
      {mostLiked.map((post) => (
        <li data-slug={post.id} data-likes={post.data.likes}>
          <a href={`/blog/${post.id}/`}>{post.data.title}</a>
          <span class="count">{post.data.likes}</span>
        </li>
      ))}
    </ul>
  </section>
  <section>
    <h3>Najnowsze artykuły</h3>
    <ul>
      {newest.map((post) => (
        <li>
          <a href={`/blog/${post.id}/`}>{post.data.title}</a>
          <FormattedDate date={post.data.pubDate} />
        </li>
      ))}
    </ul>
  </section>
</aside>
<script type="module">
  const list = document.getElementById('most-viewed-list');
  if (list) {
    const items = Array.from(list.querySelectorAll('li'));
    fetch('/api/views')
      .then((r) => (r.ok ? r.json() : {}))
      .then((data) => {
        items.forEach((li) => {
          const slug = li.dataset.slug;
          if (slug && data[slug] != null) {
            li.dataset.views = data[slug];
            const span = li.querySelector('.count');
            if (span) span.textContent = data[slug];
          }
        });
        items.sort(
          (a, b) => parseInt(b.dataset.views || '0') - parseInt(a.dataset.views || '0')
        );
        items.forEach((li) => list.appendChild(li));
      });
  }
  const likeList = document.getElementById('most-liked-list');
  if (likeList) {
    const items = Array.from(likeList.querySelectorAll('li'));
    fetch('/api/likes')
      .then((r) => (r.ok ? r.json() : {}))
      .then((data) => {
        items.forEach((li) => {
          const slug = li.dataset.slug;
          if (slug && data[slug] != null) {
            li.dataset.likes = data[slug];
            const span = li.querySelector('.count');
            if (span) span.textContent = data[slug];
          }
        });
        items.sort(
          (a, b) => parseInt(b.dataset.likes || '0') - parseInt(a.dataset.likes || '0')
        );
        items.forEach((li) => likeList.appendChild(li));
      });
  }
</script>

<style>
  .sidebar {
    padding: 1em;
    background: rgb(var(--gray-light));
    border-radius: 12px;
    width: 280px;
  }
  h3 {
    margin-top: 0;
  }
  ul {
    list-style: none;
    padding-left: 0;
  }
  li {
    margin-bottom: 0.5em;
  }
  a {
    text-decoration: none;
  }
  .count {
    margin-left: 0.5em;
    color: rgb(var(--gray));
  }
</style>
