<section class="hero">
    <div class="particles">
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
    </div>
    <h1 id="hero-text">Analiza globalnej geopolityki</h1>
    <div class="globe"></div>
    <p class="subtitle">Wnikliwe spojrzenie na siły kształtujące świat.</p>
    <a class="cta" href="/blog">Zapraszamy na bloga</a>
</section>
<script>
    const messages = [
        "Analiza globalnej geopolityki",
        "Śledzimy zmiany potęgi państw",
        "Zrozumieć stosunki międzynarodowe",
    ];
    let index = 0;
    setInterval(() => {
        index = (index + 1) % messages.length;
        document.getElementById('hero-text').textContent = messages[index];
    }, 3000);

    const hero = document.querySelector('.hero');
    const particles = document.querySelectorAll('.particle');
    function updateParticles(x = window.innerWidth / 2, y = window.innerHeight / 2) {
        const rect = hero.getBoundingClientRect();
        const relX = x - rect.left;
        const relY = y - rect.top;
        hero.style.setProperty('--cursor-x', `${relX}px`);
        hero.style.setProperty('--cursor-y', `${relY}px`);
        particles.forEach((p, i) => {
            const offsetX = (x / window.innerWidth - 0.5) * 40 * (i + 1);
            const offsetY = (y / window.innerHeight - 0.5) * 40 * (i + 1);
            const scrollOffset = window.scrollY * 0.05 * (i + 1);
            p.style.transform = `translate(${offsetX}px, ${scrollOffset + offsetY}px)`;
        });
    }
    hero.addEventListener('mousemove', (e) => updateParticles(e.clientX, e.clientY));
    hero.addEventListener('mouseleave', () => {
        hero.style.removeProperty('--cursor-x');
        hero.style.removeProperty('--cursor-y');
    });
    window.addEventListener('scroll', () => updateParticles());
</script>
<style>
    .hero {
        position: relative;
        text-align: center;
        padding: 4em 1em;
        width: 100vw;
        margin-left: calc(50% - 50vw);
        background: radial-gradient(circle at var(--cursor-x, 50%) var(--cursor-y, 50%), rgba(255,255,255,0.2), transparent 60%), var(--royal-green);
        color: var(--ivory);
        overflow: hidden;
        animation: fadeIn 1.5s ease-in-out;
    }
    .hero h1 {
        font-size: 2.5em;
        margin: 0;
        color: var(--gold-accent);
    }
    .subtitle {
        font-size: 1.25em;
        margin: 1em 0;
    }
    .cta {
        display: inline-block;
        margin-top: 1em;
        padding: 0.75em 2em;
        background: var(--diplomatic-blue);
        color: var(--ivory);
        border-radius: 4px;
        text-decoration: none;
    }
    .cta:hover {
        background: var(--gold-accent);
        color: var(--charcoal);
    }
    .globe {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        border: 4px solid var(--gold-accent);
        margin: 2em auto;
        position: relative;
        animation: spin 20s linear infinite;
    }
    .globe::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 120px;
        height: 60px;
        border: 3px dotted var(--gold-accent);
        border-radius: 50%;
        transform: translate(-50%, -50%);
    }
    .particles {
        position: absolute;
        inset: 0;
        pointer-events: none;
        overflow: hidden;
    }
    .particle {
        position: absolute;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.1);
        width: 80px;
        height: 80px;
        top: 20%;
        left: 20%;
        transition: transform 0.2s ease-out;
    }
    .particle:nth-child(2) {
        width: 60px;
        height: 60px;
        top: 50%;
        left: 60%;
    }
    .particle:nth-child(3) {
        width: 100px;
        height: 100px;
        top: 70%;
        left: 30%;
    }
    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }
    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
</style>
