---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import PostNavigation from '../components/PostNavigation.astro';

type Props = CollectionEntry<'blog'>['data'] & {
    slug: string;
    prev?: { id: string; data: { title: string } };
    next?: { id: string; data: { title: string } };
};

const {
    slug,
    title,
    description,
    pubDate,
    updatedDate,
    heroImage,
    likes,
    prev,
    next,
} = Astro.props as Props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
                        .last-updated-on {
                                font-style: italic;
                        }
                        .views {
                                font-size: 0.9em;
                        }
                        .likes {
                                font-size: 0.9em;
                        }
                </style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
				</div>
				<div class="prose">
					<div class="title">
                                                <div class="date">
                                                        <FormattedDate date={pubDate} />
                                                        {
                                                                updatedDate && (
                                                                        <div class="last-updated-on">
                                                                               Last updated on <FormattedDate date={updatedDate} />
                                                                        </div>
                                                                )
                                                        }
                                                        <div class="views">Wyświetlenia: <span id="view-count">0</span></div>
                                                        <div class="likes">Polubienia: <span id="like-count">{likes ?? 0}</span> <button id="like-btn" aria-label="Polub wpis">♡</button></div>
                                                </div>
						<h1>{title}</h1>
						<hr />
					</div>
                                        <slot />
                                        <PostNavigation prev={prev} next={next} />
                                </div>
                        </article>
                </main>
                <Footer />
                <script type="module" define:vars={{ slug }}>
                        const currentSlug = slug;
                        fetch(`/api/views/${currentSlug}`, { method: 'POST' })
                                .then((r) => r.ok ? r.json() : { views: 0 })
                                .then((d) => {
                                        const el = document.getElementById('view-count');
                                        if (el) el.textContent = d.views;
                                });
                        const likeBtn = document.getElementById('like-btn');
                        const likeStorageKey = `liked-${currentSlug}`;
                        fetch(`/api/likes?slugs=${currentSlug}`)
                                .then((r) => r.ok ? r.json() : {})
                                .then((d) => {
                                        const el = document.getElementById('like-count');
                                        if (el && d[currentSlug] != null) el.textContent = d[currentSlug];
                                        if (likeBtn && sessionStorage.getItem(likeStorageKey)) {
                                                likeBtn.disabled = true;
                                                likeBtn.textContent = '❤️';
                                                likeBtn.classList.add('liked');
                                        }
                                });
                        likeBtn?.addEventListener('click', () => {
                                fetch(`/api/likes/${currentSlug}`, { method: 'POST' })
                                        .then((r) => r.ok ? r.json() : { likes: 0 })
                                        .then((d) => {
                                                const el = document.getElementById('like-count');
                                                if (el) el.textContent = d.likes;
                                                if (likeBtn) {
                                                        likeBtn.disabled = true;
                                                        likeBtn.textContent = '❤️';
                                                        likeBtn.classList.add('liked', 'heartbeat');
                                                        likeBtn.addEventListener('animationend', () => {
                                                                likeBtn.classList.remove('heartbeat');
                                                        }, { once: true });
                                                }
                                                sessionStorage.setItem(likeStorageKey, '1');
                                        });
                        });
                </script>
        </body>
</html>
